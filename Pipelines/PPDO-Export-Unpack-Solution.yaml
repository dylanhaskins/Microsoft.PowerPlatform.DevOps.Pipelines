parameters:
- name: Branch
  type: string
- name: BranchToCreate
  type: string
  default: "Commit to existing branch specified in Branch parameter"
- name: SolutionName
  type: string
- name: Project
  type: string
- name: Repo
  type: string

name: export-${{parameters.SolutionName}}-to-git-branch

pool:
  vmImage: 'windows-latest'

trigger: none
pr: none

variables:
  - group: ppdo-variables

stages:
- stage: export_unpack_solution_to_git
  displayName: 'Export & Unpack solution to git' 
  jobs:
  - job: export_unpack_solution_to_git

    pool:
      vmImage: 'windows-latest'

    steps:
    
    - task: PowerShell@2
      displayName: Powershell - set WindowsPowerShell directory
      inputs:
        targetType: 'inline'
        script: |
          mkdir '$(UserProfile)\Documents\WindowsPowerShell'

    - task: Cache@2
      displayName: Cache Tooling components
      inputs:
        key: ppdo | $(Agent.OS)  
        path: $(UserProfile)\Documents\WindowsPowerShell\
        cacheHitVar: ToolingCached

    - task: PowerShell@2
      displayName: 'Install Microsoft.PowerPlatform.DevOps'
      inputs:
        targetType: 'inline'
        script: |
          Install-Module -Name Microsoft.PowerPlatform.DevOps -AllowClobber -AllowPrerelease -Scope CurrentUser -Force    

    - pwsh: |
        # Workaround for git Filename too long issue 
        git config --system core.longpaths true        
      displayName: "Configuring core.longpaths true"
   
    # Checkout our Branch
    - checkout: git://${{parameters.Project}}/${{parameters.Repo}}@${{parameters.Branch}}
      displayName: 'Checkout Source Branch'
      
    # Configure email/name and checkout git branch
    #"${{parameters.email}}"
    #"${{parameters.userName}}"
    - script: |
        git config user.email "dylan@haskins.co.nz"        
        git config user.name "Dylan Haskins"
        git checkout origin/${{parameters.Branch}} --track
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Initialize Git'      
    
    # If the BranchToCreate variable *does not* contain an empty string, then
    # create a branch based on BranchToCreate variable value and checkout that branch.
    - script: |
        git checkout -b "${{parameters.BranchToCreate}}"
      displayName: 'Create New Git Branch: ${{parameters.BranchToCreate}}'
      workingDirectory: $(Build.SourcesDirectory)
      condition: and(succeeded(), ne('${{parameters.BranchToCreate}}', 'Commit to existing branch specified in Branch parameter')) # If an empty value is passed for the BranchToCreate variable, then skip this task

    - task: PowerShell@2
      displayName: Export Solution
      inputs:
        targetType: 'inline'
        script: |
          Export-Solution -StartPath "$(Build.SourcesDirectory)" -SelectedSolution "${{parameters.SolutionName}}" -UserName $(ClientID) -Password $(ClientSecret) -TenantId $(TenantId)  -UseClientSecret $true

    - pwsh: |
        # Workaround for git Filename too long issue 
        git config --system core.longpaths true
        git add --all
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Add Changes to Git Branch'

    # Commit all changes to Git branch. If there are no changes we want to warn the user that there was nothing to commit. As this could mean there was a user error involved.
    - pwsh: |
        $gitStatus = iex "git status --porcelain"
        if ($gitStatus) {
           git commit -m "A Commit Message goes here"
           git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin "${{parameters.BranchToCreate}}"
        }
        else {
           Write-Host "##vso[task.logissue type=warning]There is nothing to commit. No changes have been made since the previous commit. If this is unexpected make sure your changes have been published before committing again."
           echo '##vso[task.setvariable variable=nothing2Commit;isOutput=true]"NoCommit"'
        }
      workingDirectory:  $(Build.SourcesDirectory)
      displayName: 'Commit Changes to Git Branch'
      name: CommitStatus
      continueOnError: true

