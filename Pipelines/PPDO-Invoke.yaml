# This pipeline gets triggered manually or via an API call.  
# It is a general purpose automation that allows you to invoke a PPDO Command

# The following variables need to be set when the pipeline is queued to run:
# Project: The name of the Azure DevOps Project to which we are exporting our solution.
# Repo: The name of the Azure DevOps Repo to which we are exporting our solution.
# Branch: The name of the Azure DevOps Branch in the Repo above to which we are exporting our solution.
# CommitMessage: The commit message for this commit.
# Email: The email of the user performing the commit.
parameters:
- name: Branch
  type: string
  default: 'main'
- name: CommitMessage
  type: string
  default: 'default'
- name: InvokeCommand
  type: string
  default: 'ppdo'
- name: Email
  type: string
  default: 'default'
- name: UserName
  type: string
  default: 'default'  
- name: Project
  type: string
- name: Repo
  type: string
- name: AgentPool
  type: string
  default: "Azure Pipelines"
- name: VMImage
  type: string
  default: "windows-latest"
- name: VariableGroup
  type: string
  default: 'NA'  
trigger: none
pr: none

name: ppdo-${{parameters.InvokeCommand}}-execute-command

variables:
- ${{ if ne(parameters.VariableGroup, 'NA') }}:
  - group: ${{parameters.VariableGroup}}

stages:
- stage: invoke_command
  displayName: 'Invoke a PPDO Command' 
  jobs:
  - job: invoke_command

    pool:
      ${{ if and(ne(parameters.AgentPool, 'NA'), ne(parameters.AgentPool, '')) }}:
        name: ${{parameters.AgentPool}}
      ${{ if and(ne(parameters.VMImage, 'NA'), ne(parameters.VMImage, '')) }}:
        vmImage: ${{parameters.VMImage}}
    steps:
    - task: PowerShell@2
      displayName: Powershell - set WindowsPowerShell directory
      inputs:
        targetType: 'inline'
        script: |
          mkdir '$(UserProfile)\Documents\WindowsPowerShell'

    - task: Cache@2
      displayName: Cache Tooling components
      inputs:
        key: ppdo_cloud | $(Agent.OS)  
        path: $(UserProfile)\Documents\WindowsPowerShell\
        cacheHitVar: ToolingCached

    - task: PowerShell@2
      displayName: 'Install Microsoft.PowerPlatform.DevOps'
      inputs:
        targetType: 'inline'
        script: |
          Install-Module -Name Microsoft.PowerPlatform.DevOps.vNext -AllowClobber -AllowPrerelease -Scope CurrentUser -Force 

    - pwsh: |
        # Workaround for git Filename too long issue 
        git config --system core.longpaths true  
        git config --global user.email '${{parameters.Email}}'
        git config --global user.name '${{parameters.UserName}}'    
      displayName: "Configuring core.longpaths true"     

    # Checkout Pipelines
    - checkout: self
      path: 'PipelineUtils'
      displayName: 'Checkout Pipeline Branch'
    
    # Checkout our Branch
    - checkout: git://${{parameters.Project}}/${{parameters.Repo}}@${{parameters.Branch}}
      path: 'Source'
      displayName: 'Checkout Source Branch'

    - task: PowerShell@2
      displayName: 'Execute PPDO Command'
      inputs:
        targetType: 'inline'
        script: |
          Set-Location -Path '..\Source'
          git checkout origin/${{parameters.Branch}} --track            
          ${{parameters.InvokeCommand}} -Branch ${{parameters.Branch}}
          git add --all
          $gitStatus = iex "git status --porcelain" 
          if ($gitStatus) {
            git commit -m "${{parameters.CommitMessage}}"
            git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin "${{parameters.Branch}}" 
          }
           else {
           Write-Host "##vso[task.logissue type=warning]There is nothing to commit. No changes have been made since the previous commit. If this is unexpected make sure your changes have been published before committing again."
           echo '##vso[task.setvariable variable=nothing2Commit;isOutput=true]"NoCommit"'
          }

  
